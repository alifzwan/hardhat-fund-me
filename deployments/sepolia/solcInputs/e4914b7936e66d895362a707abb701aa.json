{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "/****** FundMe.sol *******\n    Same as wallet, Smart Contract hold a fund as well since everytime we deploy a contract the user get the contract address.\n\n   In this contract, we gonna learn:\n  - Get funds from users\n  - Withdraw funds\n  - Set  minimum funding value in USD\n\n  */\n\n// SPDX-License-Identifier: MIT\n\n/* DEBUGGING TIPS\n  1. Tinker and try to pinpoint exactly what's going on\n  2. Google the exact error\n  2.5 Go to Github repo - https://github.com/smartcontractkit/full-blockchain-solidity-course-js\n  3.0 Ask a question on a forum like Stack Exchange ETH or Stack Overflow\n*/\npragma solidity ^0.8.21;\n\nimport \"./PriceConverter.sol\";\n\n/* All Notes:\n\n\n\n     1. payable - make our fund function turn red\n     */\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant minimumUsd = 50 * 1e18; // $50 of ETH = 0.0031 ETH\n    /* GAS COMPARISON \n        Constant:\n        21,415 gas   -  constant\n        23,515 gas   -  non-constant\n        21,415 * 141000000000 = $9.058545\n        23,515 * 141000000000 = $9.946845\n    \n        We can save like $1 for GAS PRICE\n\n        Immutable:\n        21,508 gas - immutable\n        23,644 gas - non-immutable\n        \n     */\n\n    // TRACKING ALL THE FUNDERS\n    address[] public funders; // Display the funders\n    mapping(address => uint256) public addressToAmountFunded; // Display the amount the funder pay according to index\n    address public immutable i_owner; // Display the owner\n\n    AggregatorV3Interface public priceFeed;\n\n    /* HOW TO REDUCE GAS?\n        - So when we create this contract, it require approximately 859,757 gas price.\n        - Well how we gonna reduce it?\n        \n      Notes:- https://solidity-by-example.org/constants/\n            - https://solidity-by-example.org/immutable/\n\n       There's Two ways to reduce GAS PRICE:  \n       1. constant  - for variable outside function that you never change\n       2. immutable - just like constant but it can be set in a constructor ONCE\n\n\n     */\n\n    /* CONSTRUCTOR()\n      - Anybody can fund this contract but we dont want anyone to be able to withdraw.\n      - We only want the person who collecting the fund to able to withdraw\n\n      msg.sender - whoever deploy this contract (owner)\n\n\n     */\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    /* FUND()\n     // We want to be able to set a minimum fund amount\n     // Revert - undo any action berfore, and send remaining gas back\n     // 1. How do we send ETH to this contract?\n      */\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\n            \"Didn't sent enough!\"\n        ); // 1e18 - 1 ETH = 100000000000000 Gwei\n        funders.push(msg.sender); // msg.sender - return the address of the sender\n        addressToAmountFunded[msg.sender] = msg.value; // msg.value - updated value\n    }\n\n    /* WITHDRAW()\n     You have to use for loop:\n     for(starting index, ending index, step amount){}\n\n      Notes: https://solidity-by-example.org/sending-ether/\n\n      You can send Ether to other contracts by:\n      1. transfer (2300 gas                   , throws error - if it fails)\n      2. send     (2300 gas                   , returns bool - if it fails)\n      3. call     (forward all gas or set gas , returns bool - if it fails)\n      \n      If you want to send ETH, it only can work with payable\n      msg.sender - address\n      payable(msg.sender) - payable address \n\n     1. transfer:\n        payable(msg.sender).transfer(address(this).balance);\n\n     2. send:\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);  \n        require(sendSuccess, \"Send failed\");\n\n     3. call:\n        (bool callSuccess, ) = payable(msg.sender).call{value : address(this).balance}(\"\"); \n        require(callSuccess, \"Call Failed\");\n\n      Modifier:\n      onlyOwner\n      1. It will priotize the onlyOwner Modifier.\n      2. It's like before you read your function, read the onlyOwner Modifier first.\n      \n      */\n\n    // Modifier\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // funders = new address[](\"starting index\")\n        funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\"); //Call\n        require(callSuccess, \"Call Failed\");\n    }\n\n    /* MODIFIER\n      \n      Notes: https://solidity-by-example.org/function-modifier/\n\n      - Let's say that there's a lot of function that we want it to be only can be access by Owner\n\n      - Normaly we add this line:\n        require(msg.sender == owner, \"Sender is not owner!\");\n\n      - However, we dont want this line to be in all function right?\n\n      - That's where Modifier comes in.\n\n\n      The \" _; \"\n      - If you put it under, it will tell the function to do the modifier first\n      - If you put it above, it will tell the function to do the function first \n       */\n    modifier onlyOwner() {\n        // _;\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    /* FALLBACK() \n      \n      SITUATION 1 - What happen if someone send this contract ETH without calling the fund()\n\n      Notes - https://solidity-by-example.org/fallback/\n\n      Fallback:\n      It is a special function that is executed either when:\n      - a function that does not exist is called or\n      - Ether is sent directly to a contract but receive() does not exist or msg.data is not empty\n\n                  is msg.data empty?\n                    /     \\\n                   yes     no\n                  /          \\\n           have receive()?  fallback()\n               /   \\\n            yes     no\n           /         \\\n       receive()  fallback()\n\n       */\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /*  CUSTOM ERROR\n\n\n      Notes - https://solidity-by-example.org/error/\n\n      You can throw an error by calling requireandrevert :\n\n      require:\n      require(msg.sender == i_owner, \"Sender is not owner!\");\n      \n      revert:\n      if(msg.sender != i_owner){\n        revert NotOwner();\n      }\n      */\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n// Library - similar to contracts, but you can't declare any state variable and you can't send ether.\n//         - A library is embedded into the contract if all library functions are internal.\n\n// It's like a whole contract put it in a new file and will be called by main file.\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/* Chainlink USD/ETH Converter:\n\n  interface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (\n      uint80 roundId, \n      int256 price, \n      uint256 startedAt, \n      uint256 updatedAt, \n      uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (\n        uint80 roundId, \n        int256 price, \n        uint256 startedAt, \n        uint256 updatedAt, \n        uint80 answeredInRound);\n    }\n    */\n\nlibrary PriceConverter {\n    /* getPrice():\n    ABI\n    Address - 0x694AA1769357215DE4FAC081bf1f309aDC325306\n\n*/\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        // $2000\n\n        return uint256(price * 1e10); // 1**10\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\n        );\n        return priceFeed.version();\n    }\n}\n"
        }
    },
    "settings": {
        "evmVersion": "paris",
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
